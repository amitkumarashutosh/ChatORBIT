// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId       String      @unique
  email         String      @unique
  firstName     String?     
  lastName      String?
  createdAt     DateTime   @default(now())
  subscription  Subscription?
  intergrations Integration[]
  automations   Automation[]
}

model Subscription {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User?             @relation(fields: [userId], references: [id],onDelete:Cascade)
  userId      String?           @unique @db.Uuid
  createdAt   DateTime          @default(now())
  plan        SUBSCRIPTION_PLAN @default(FREE)
  updatedAt   DateTime          @default(now())
  customerId String?         @unique
}

model Automation{
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @default("Untitled")
  createdAt   DateTime    @default(now())
  active      Boolean     @default(false)
  trigger     Trigger[]
  listener    Listener?
  posts       Post[]
  dms         Dms[]
  user        User?       @relation(fields: [userId], references: [id],onDelete:Cascade)
  userId      String?     @db.Uuid
  keywords    Keyword[]

}

model Integration {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS  @default(INSTAGRAM)
  createdAt   DateTime      @default(now())
  user        User?         @relation(fields: [userId], references: [id],onDelete:Cascade)
  userId      String?       @db.Uuid
  token       String        @unique
  expiresAt   DateTime?    
  instagramId String?       @unique
}

model Dms{
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automation    Automation? @relation(fields: [automationId], references: [id])
  automationId  String?     @db.Uuid
  createdAt     DateTime    @default(now())
  senderId      String?     
  recieverId    String?      
  message       String?
}

model Trigger{
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String
  automation    Automation? @relation(fields: [automationId], references: [id],onDelete: Cascade)
  automationId  String?     @db.Uuid
}

model Listener{
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automation    Automation? @relation(fields: [automationId], references: [id],onDelete: Cascade)
  automationId  String?     @unique @db.Uuid
  listener      LISTENERS   @default(MESSAGE)
  prompt        String
  commentReply  String?
  dmCount       Int         @default(0)
  commentCount  Int         @default(0)

}

model Post{
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId        String     
  caption       String?
  media         String?
  mediaType     MEDIATYPE   @default(IMAGE)
  automation    Automation? @relation(fields: [automationId], references: [id],onDelete: Cascade)
  automationId  String?     @db.Uuid 
}

model Keyword{
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  automation    Automation? @relation(fields: [automationId], references: [id],onDelete: Cascade)
  automationId  String?     @db.Uuid

  @@unique([automationId, word]) //this contraint ensures that the same keyword cannot be added to the same automation more than once
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE{
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}

enum LISTENERS{
  SMARTAT
  MESSAGE
}